name: Build Wheels

on:
  workflow_dispatch:
    inputs:
      build_for:
        description: 'Target OS'
        required: true
        default: 'all'
        options:
          - 'linux'
          - 'windows'
          - 'macos'
          - 'all'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write  # Ensure GitHub Actions can push changes

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', 3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Clone DAGGER
      run: |
        git clone https://github.com/bgailleton/DAGGER.git
        cd DAGGER
        git checkout main

    - name: Clone pytopotoolbox (and libtopotoolbox)
      run: |
        git clone https://github.com/TopoToolbox/pytopotoolbox.git
        cd pytopotoolbox
        git checkout main

    # Install dependencies per OS
    - name: Install build dependencies on Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install build-essential -y

    - name: Install build dependencies on macOS
      if: runner.os == 'macOS'
      run: |
        brew install gcc

    - name: Install build dependencies on Windows
      if: runner.os == 'Windows'
      run: |
        choco install visualstudio2022buildtools -y

    # Set up Miniforge per OS
    - name: Set up Miniforge on Linux
      if: runner.os == 'Linux'
      run: |
        wget "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-x86_64.sh" -O miniforge.sh
        bash miniforge.sh -b -p $HOME/miniforge

    - name: Set up Miniforge on macOS
      if: runner.os == 'macOS'
      run: |
        brew install --cask miniforge

    # Set up Miniforge on Windows
    - name: Set up Miniforge on Windows
      if: runner.os == 'Windows'
      run: |
        curl -L -o miniforge.exe "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Windows-x86_64.exe"
        Start-Process -FilePath "miniforge.exe" -ArgumentList '/InstallationType=JustMe', '/AddToPath=1', '/RegisterPython=0', '/S', "/D=$env:USERPROFILE\miniforge3" -NoNewWindow -Wait



    # Install the correct Python environment based on matrix
    - name: Install Python environment with Miniforge on Linux
      if: runner.os == 'Linux'
      run: |
        source $HOME/miniforge/bin/activate && mamba create -n build_env python=${{ matrix.python-version }} -y
        source $HOME/miniforge/bin/activate && mamba run -n build_env mamba install -c conda-forge xtensor-python -y

    - name: Install Python environment with Miniforge on macOS
      if: runner.os == 'macOS'
      run: |
        source /opt/homebrew/Caskroom/miniforge/base/bin/activate && mamba create -n build_env python=${{ matrix.python-version }} -y
        source /opt/homebrew/Caskroom/miniforge/base/bin/activate && mamba run -n build_env mamba install -c conda-forge xtensor-python -y

    # Install the correct Python environment based on matrix
    - name: Install Python environment with Miniforge on Windows
      if: runner.os == 'Windows'
      run: |
        set "CONDA=%UserProfile%\miniforge3"  # Set the correct path for Miniforge
        cmd /c "%CONDA%\Scripts\activate.bat && conda create -n build_env python=${{ matrix.python-version }} -y"
        # cmd /c "%CONDA%\Scripts\activate.bat && conda run -n build_env conda install -c conda-forge xtensor-python -y"



    # Install pip build tools (build, wheel) and create wheels
    - name: Install pip build tools on Linux
      if: runner.os == 'Linux'
      run: |
        source $HOME/miniforge/bin/activate && mamba run -n build_env pip install build wheel

    - name: Install pip build tools on macOS
      if: runner.os == 'macOS'
      run: |
        source /opt/homebrew/Caskroom/miniforge/base/bin/activate && mamba run -n build_env pip install build wheel

    # Install pip build tools on Windows
    - name: Install pip build tools on Windows
      if: runner.os == 'Windows'
      run: |
        cmd /c "%CONDA%\Scripts\activate.bat && conda run -n build_env pip install build wheel"


    # Build wheels for pytopotoolbox
    - name: Build pytopotoolbox Wheels on Linux
      if: runner.os == 'Linux'
      run: |
        source $HOME/miniforge/bin/activate && mamba run -n build_env pip wheel ./pytopotoolbox -w wheelhouse/pytopotoolbox --no-deps

    - name: Build pytopotoolbox Wheels on macOS
      if: runner.os == 'macOS'
      run: |
        source /opt/homebrew/Caskroom/miniforge/base/bin/activate && mamba run -n build_env pip wheel ./pytopotoolbox -w wheelhouse/pytopotoolbox --no-deps

    - name: Build pytopotoolbox Wheels on Windows
      if: runner.os == 'Windows'
      run: |
       cmd /c "%CONDA%\Scripts\activate.bat && conda run -n build_env pip wheel ./pytopotoolbox -w wheelhouse/pytopotoolbox --no-deps"

    # Build wheels for DAGGER
    - name: Build DAGGER Wheels on Linux
      if: runner.os == 'Linux'
      run: |
        source $HOME/miniforge/bin/activate && mamba run -n build_env pip wheel ./DAGGER/wrappers/python -w wheelhouse/dagger --no-deps

    - name: Build DAGGER Wheels on macOS
      if: runner.os == 'macOS'
      run: |
        source /opt/homebrew/Caskroom/miniforge/base/bin/activate && mamba run -n build_env pip wheel ./DAGGER/wrappers/python -w wheelhouse/dagger --no-deps

    - name: Build DAGGER Wheels on Windows
      if: runner.os == 'Windows'
      run: |
        # Set the correct path for Miniforge and xtensor include
        $env:CONDA = "$env:USERPROFILE\miniforge3"
        $env:XTENSOR_INCLUDE_PATH = "$env:CONDA\envs\build_env_dagger\Library\include"
        $env:INCLUDE = "$env:XTENSOR_INCLUDE_PATH;$env:INCLUDE"
        
        # Ensure the environment is created
        cmd /c "%CONDA%\Scripts\activate.bat && conda create -n build_env_dagger python=3.12 -y"

        # Install xtensor-python to the environment
        cmd /c "%CONDA%\Scripts\activate.bat && conda run -n build_env_dagger conda install -c conda-forge xtensor-python -y"
        
        # Finally, run the build process
        cmd /c "%CONDA%\Scripts\activate.bat && conda run -n build_env_dagger pip wheel ./DAGGER/wrappers/python -w wheelhouse/dagger --no-deps"



    # Build wheels for scabbard, ONLY ONCE so arbitrary choosing one run (i.e. one python version and one OS)
    - name: Build scabbard Wheel
      if: runner.os == 'Linux' && matrix.python-version == '3.12'
      run: |
        source $HOME/miniforge/bin/activate && mamba run -n build_env pip wheel . -w wheelhouse/scabbard --no-deps


    # Commit and push the built wheels
    - name: Commit wheels to repository
      run: |
        if [ "${{ runner.os }}" == "Linux" ] || [ "${{ runner.os }}" == "macOS" ]; then
          mkdir -p wheels/pytopotoolbox wheels/dagger wheels/scabbard
          mv wheelhouse/pytopotoolbox/*.whl wheels/pytopotoolbox/
          mv wheelhouse/dagger/*.whl wheels/dagger/
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Stage local changes
          git add wheels/**/*.whl

          # Stash changes to prevent rebase conflicts
          git stash

          # Pull latest changes and rebase
          git fetch origin
          git rebase origin/main || git rebase --abort

          # Apply stashed changes
          git stash pop || echo "No local changes to apply"

          # Add and commit changes again
          git add wheels/**/*.whl
          git commit -m "Add built wheels to repository [skip ci]"

          # Try to push with error handling
          RETRIES=20
          for i in $(seq 1 $RETRIES); do
            git push origin refs/heads/main && break || {
              echo "Push failed, retrying $i/$RETRIES..."
              git fetch origin
              git rebase origin/main || git rebase --abort
              sleep 5
            }
          done

          if [ $i -eq $RETRIES ]; then
            echo "Push failed after $RETRIES attempts, aborting."
            exit 1
          fi

        elif [ "${{ runner.os }}" == "Windows" ]; then
          powershell -Command "
            New-Item -ItemType Directory -Path wheels\pytopotoolbox -Force
            New-Item -ItemType Directory -Path wheels\dagger -Force

            # Move files on **separate** lines
            Move-Item -Path wheelhouse\pytopotoolbox\*.whl -Destination wheels\pytopotoolbox\
            Move-Item -Path wheelhouse\dagger\*.whl -Destination wheels\dagger\

            git config --global user.name 'github-actions[bot]'
            git config --global user.email 'github-actions[bot]@users.noreply.github.com'

            # Stage local changes
            git add wheels/**/*.whl

            # Stash changes to prevent rebase conflicts
            git stash

            # Pull latest changes and rebase
            git fetch origin
            if (!(git rebase origin/main)) {
              git rebase --abort
            }

            # Apply stashed changes
            if (!(git stash pop)) {
              Write-Host 'No local changes to apply'
            }

            # Add and commit changes again
            git add wheels/**/*.whl
            git commit -m 'Add built wheels to repository [skip ci]'

            # Initialize retry logic **properly**
            $RETRIES = 20
            $i = 1
            while ($i -le $RETRIES) {
              if (git push origin refs/heads/main) {
                break
              } else {
                Write-Host 'Push failed, retrying $i/$RETRIES...'
                git fetch origin
                if (!(git rebase origin/main)) {
                  git rebase --abort
                }
                Start-Sleep -Seconds 5
                $i = $i + 1
              }
            }

            if ($i -eq $RETRIES) {
              Write-Host 'Push failed after $RETRIES attempts, aborting.'
              exit 1
            }
          "
        fi
      shell: bash





    # Commit and push the built wheels for scabbard (done once)
    - name: Commit scabbard wheel to repository
      if: runner.os == 'Linux' && matrix.python-version == '3.12'
      run: |
        mv wheelhouse/scabbard/*.whl wheels/scabbard/

        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # Stage local changes
        git add wheels/scabbard/*.whl

        # Stash changes to prevent rebase conflicts
        git stash

        # Pull latest changes and rebase
        git fetch origin
        git rebase origin/main || git rebase --abort

        # Apply stashed changes
        git stash pop || echo "No local changes to apply"

        # Add and commit changes again
        git add wheels/scabbard/*.whl
        git commit -m "Add scabbard wheel to repository [skip ci]"

        # Try to push with error handling
        RETRIES=20
        for i in $(seq 1 $RETRIES); do
          git push origin refs/heads/main && break || {
            echo "Push failed, retrying $i/$RETRIES..."
            git fetch origin
            git rebase origin/main || git rebase --abort
            sleep 5
          }
        done

        if [ $i -eq $RETRIES ]; then
          echo "Push failed after $RETRIES attempts, aborting."
          exit 1
        fi
